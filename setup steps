In Kubernetes, you can have multiple services running, each responsible for a specific application or microservice. When external traffic enters your Kubernetes cluster, it needs to be directed to the appropriate service. This is where Ingress Nginx comes into play.

Think of Ingress Nginx as a traffic controller or gateway for incoming requests. It acts as an intermediary between the outside world (clients, browsers) and the services running inside the cluster. It allows you to define rules that determine how incoming traffic should be routed to different services based on criteria like the requested URL path or the hostname.

Here's a simplified overview of how Ingress Nginx works in Kubernetes:

1. You define an Ingress resource in Kubernetes, which contains rules specifying how incoming requests should be handled.
2. Ingress Nginx continuously monitors the Ingress resources and incoming traffic.
3. When a request arrives, Ingress Nginx examines the request's URL path and hostname to determine the appropriate routing.
4. Based on the rules defined in the Ingress resource, Ingress Nginx forwards the request to the relevant service within the cluster.
5. The selected service processes the request and generates a response, which is sent back to Ingress Nginx.
6. Ingress Nginx then delivers the response back to the client or browser that made the initial request.





STEPS TO FOLLOW

1. starting with if want to create your own domain with ssl certificate follow this steps

* command to create ssl certificate and private key 

    openssl req -new -newkey rsa:2048 -nodes -keyout example.com.key -out example.com.csr -subj "/CN=example.com" && openssl x509 -req -days 365 -in example.com.csr -signkey example.com.key -out example.com.crt

this command which creates two file which is of 
    ->example.com.key
    ->example.com.crt

-----------------or-----------------------

you can also use my certificate and key which is of dhanush.com domain, dhanush-tls.crt and dhanush-tls.key is in repositiory 

2. apply ingress controller which in repo

    kubectl apply -f ingress-controller.yaml
    
    it will aslo creates namespace which is ingress-nginx

3. create a secret for the certificate and key 

    kubectl create secret tls dhanush-secret-tls --namespace ingress-nginx --key dhanush-tls.key --cert dhanush-tls.crt

    this secret will be used in ingress-rule.yaml file 

4. deployment two pods which is also contents cluster service in it 

    kubectl apply -f nginx.yaml
    kubectl apply -f normal-nginx.yaml

    both will be deployed in the same namespace u can check it use the command 

    kubectl get all -n ingress-nginx

5. u need add ur domain name in ur hosts of ur system 
    if u give this command u will get loadbalancer service with 

        kubectl get svc -n ingress-nginx

    56.90.44.34 add this in hosts file along with ur domain name like this ====> hosts file path in C:\Windows\System32\drivers\etc

        56.90.44.34 dhanush.com
    
    now which ever traffic comes to dhanush.com in ur system with be routed to 56.90.44.34

6. finally apply ingress-rules file to get this working 

    kubectl apply -f ingress-rules.yaml

